@using Service.Repository;
<Chart Config="_config1" @ref="_chart1"></Chart>

@code {
    [Parameter]
    public IList<IBillDateSummary> billsByDate { get; set; }

    [Parameter]
    public Func<CallbackGenericContext, ValueTask>? onClickAsync { get; set; }

    private BarChartConfig _config1;
    private Chart _chart1;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _config1 = new BarChartConfig()
            {
                Options = new Options()
                {
                    Plugins = new Plugins()
                    {
                        Legend = new Legend()
                        {
                            Align = Align.Center,
                            Display = false,
                            Position = LegendPosition.Right
                        }
                    },
                    Scales = new Dictionary<string, Axis>()
                    {
                        {
                            Scales.XAxisId, new Axis()
                            {
                                Stacked = true,
                                Ticks = new Ticks()
                                {
                                    MaxRotation = 0,
                                    MinRotation = 0
                                }
                            }
                        },
                        {
                            Scales.YAxisId, new Axis()
                            {
                                Stacked = true
                            }
                        }
                    },
                    OnClickAsync = onClickAsync
                }
            };

        _config1.Data.Labels = getXLabels();
        _config1.Data.Datasets.Add(new BarDataset()
            {
                Label = "Value",
                Data = getYValues(),
                BackgroundColor = new List<string>() { "rgb(255, 0, 0)" },
                BorderColor = new List<string>() { "rgb(255, 0, 0)" },
                BorderWidth = 3,
                Fill = true
            });

    }

    private List<decimal?> getYValues()
    {
        List<decimal?> bills = new List<decimal?>();
        foreach(var billDateSummary in billsByDate)
        {
            bills.Add(billDateSummary.GetTotal());
        }

        return bills;
    }

    private List<string> getXLabels()
    {
        List<string> result = new List<string>();
        foreach (var billDateSummary in billsByDate)
        {
            DateTime date = billDateSummary.GetDate();
            result.Add(date.DayOfWeek.ToString() + "\n" + date.Day.ToString() + "/" + date.Month.ToString());            
        }

        return result;
    }
}
