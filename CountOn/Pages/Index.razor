@page "/"
@using PSC.Blazor.Components.Chartjs.Interfaces;
@using Service.Repository;
@using System.Text.Json;
@using CountOn.Charts;

<div>
	<div class="top-left-button-container">
		<div class="top-left-button p-1 m-1 box-shadow" @onclick="(e => NavigateToBillPage())">+</div>		
	</div>
	
	<DropDownMenu Label="Filters">
		<Content>
			<div class="d-flex flex-column flex-wrap align-items-center">
				<div class="d-flex flex-grow-1 p-1 align-content-center">
					<BillTypeSelector Values="Enum.GetValues(typeof(DBManager.Entities.BillType)).Cast<DBManager.Entities.BillType>().Select(e => e.ToString()).ToList()"
						Label="Type"
						OnValueChange="SetBillTypeFilter"
						DefaultValue="@DBManager.Entities.BillType.ALL.ToString()">
					</BillTypeSelector>
				</div>

				<div class="d-flex flex-grow-1 flex-column align-items-center p-1 @(_config.GetType() == typeof(PieChartConfig) ? "disabled" : "")">
					<DatesPicker 
						UpdateDates="UpdateDates"
						UpdateMonth="UpdateMonth" 
					/>
				</div>
			</div>
		</Content>
	</DropDownMenu>

	<DropDownMenu Label="Summary" Visibility="d-block">
		<Content>
			<div class="text-center">
				<h1>Expenses</h1>
				<h5>@selectedDateName</h5>
			</div>
		</Content>
	</DropDownMenu>

	<DropDownMenu Label="Chart">
		<Content>
			@if (_config.GetType() == typeof(PieChartConfig))
			{
				<div class="top-left-button p-1 m-1 box-shadow" @onclick="(e => GoBackToBarChart())">&#8592;</div>
				<h1 class="text-center">@selectedBill.GetDate().DayOfWeek.ToString() @selectedBill.GetDate().Day.ToString("00")/@selectedBill.GetDate().Month.ToString("00")/@selectedBill.GetDate().Year.ToString("0000")</h1>
			}
			<div class="chart-container">				
				<Chart Style="flex:1; display:flex" Config="_config" @ref="_chart"></Chart>
			</div>
		</Content>
	</DropDownMenu>

	<DropDownMenu Label="Bills">
		<Content>
			@{
				void RenderBills(IList<DBManager.Entities.Bill> bills, string date)
				{
					@if (bills.Any())
					{
						IList<DBManager.Entities.Bill> filteredBills = bills;

						@if (billTypeFilter != DBManager.Entities.BillType.ALL)
						{
							filteredBills = bills.Where(x => x.BillType == billTypeFilter).ToList();
						}

						@if (filteredBills.Any())
						{
							<div class="bill-container">
								<div class="date-element">@date</div>
								@foreach (var bill in filteredBills)
								{
									<div class="bill-element" @onclick="(e => NavigateToBillPage(JsonSerializer.Serialize<DBManager.Entities.Bill>(bill)))">
										<div class="bill-left-element">
											<div class="align-text-start bill-title">@bill.Name</div>
											<div class="align-text-start bill-type">@bill.BillType</div>
										</div>
										<div class="bill-right-element">
											<div class="text-center">@bill.BillDate.Hour.ToString("00"):@bill.BillDate.Minute.ToString("00")</div>
											<div class="text-center">@bill.Price €</div>
										</div>
									</div>
								}
							</div>
						}
					}
				}

				void RenderBillsInDate()
				{
					if (selectedBill != null)
					{
						RenderBills(selectedBill.GetAllBills(), selectedBill.GetDate().ToString("dd/MM/yyyy"));
					}
					else
					{
						@foreach (var billsInDate in billsByDate.Reverse())
						{
							var bills = billsInDate.GetAllBills();
							RenderBills(bills, @billsInDate.GetDate().ToString("dd/MM/yyyy"));
						}
					}
				}

				RenderBillsInDate();
			}
		</Content>
	</DropDownMenu>

</div>


@code
{
	private IChartConfig _config;
	private Chart _chart;

	private IList<IBillDateSummary> billsByDate = new List<IBillDateSummary>(),
		filteredBills = new List<IBillDateSummary>();
	private IBillDateSummary selectedBill;

	private DBManager.Entities.BillType billTypeFilter;

	private DateTime fromDate;
	private DateTime toDate;

	private string selectedDateName;

	protected override void OnInitialized()
	{
		_config = GetChartConfig();
	}

	private void UpdateDates(int dateLimit, DateTime valueToAssign)
	{
		if (dateLimit == 0)
		{
			fromDate = valueToAssign;
			if (toDate == DateTime.MinValue)
				return;
		}
		else
		{
			toDate = valueToAssign;
			if (fromDate == DateTime.MinValue)
				return;
		}

		selectedDateName = $"{fromDate.ToString("dd/MM/yyyy")} - {toDate.ToString("dd/MM/yyyy")}";
		SetBillsByDateRange();
		_config = GetChartConfig();
		StateHasChanged();
	}

	private void UpdateMonth(int month, string monthName)
	{
		selectedDateName = $" {monthName}";
		int year = DateTime.Now.Year;
		month++;

		// Get the first day of the month
		fromDate = new DateTime(year, month, 1);
		// Get the last day of the month
		toDate = new DateTime(year, month, DateTime.DaysInMonth(year, month));

		SetBillsByDateRange();
		_config = GetChartConfig();
		StateHasChanged();
	}

	private void SetBillsByDateRange()
	{
		@inject IBillRepository rep;
		billsByDate = rep.GetBillsByDateRange(fromDate, toDate);
	}

	private IChartConfig GetChartConfig()
	{
		if (selectedBill != null)
		{
			return PieChart.GetPieChartConfig(selectedBill);
		}
		
		return BarChart.GetBarChartConfig(billsByDate, onClickAsyncBarChart);
	}

	private void NavigateToBillPage(string JsonBill = "")
	{
		@inject NavigationManager navManager;
		navManager.NavigateTo("bill/" + JsonBill);
	}

	public ValueTask onClickAsyncBarChart(CallbackGenericContext value)
	{
		selectedBill = billsByDate[value.DataIndex];
		_config = GetChartConfig();
		StateHasChanged();

		return ValueTask.CompletedTask;
	}

	private void GoBackToBarChart()
	{
		selectedBill = null;
		_config = GetChartConfig();
		StateHasChanged();
	}

	private void SetBillTypeFilter(string billType)
	{
		billTypeFilter = (DBManager.Entities.BillType)Enum.Parse(typeof(DBManager.Entities.BillType), billType);
		StateHasChanged();
	}
}