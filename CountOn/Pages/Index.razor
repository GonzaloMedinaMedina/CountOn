@page "/"
@using PSC.Blazor.Components.Chartjs.Interfaces;
@using Repository;
@using System.Text.Json;

<div class="flex">

	<div class="top-left-button-container">
		<div class="top-left-button p-1" @onclick="(e => NavigateToBillPage())">+</div>
	</div>

	<div class="billing-container blue">
		
		<div class="p-2">
			<button @onclick="(e => GoBackToBarChart())">Back</button>
			<Chart Config="_config" @ref="_chart"></Chart>
		</div>

		<div class="p-2 blue">
			<div class="bill-elements-header white">
				<div class="bill-text">Name</div>
				<div class="bill-text">Price</div>
				<div class="bill-text">Date</div>
			</div>

			@foreach (var billsInDate in billsByDate.Reverse())
			{
				var bills = billsInDate.GetAllBills();
				@if (bills.Any())
				{
					<div>
						<div>@billsInDate.GetDate().ToString()</div>
						@foreach (var bill in bills)
						{
							<div class="bill-element white" @onclick="(e => NavigateToBillPage(JsonSerializer.Serialize<DBManager.Entities.Bill>(bill)))">
								<div class="bill-text">@bill.Name</div>
								<div class="bill-text">@bill.Price</div>
								<div class="bill-text">@bill.BillDate</div>
							</div>
						}
					</div>
				}
			}
		</div>
	</div>
</div>


@code
{
	private IChartConfig _config;
	private Chart _chart;

	private IList<IBillDateSummary> billsByDate = new List<IBillDateSummary>();
	private IBillDateSummary selectedBill = null;

	protected override void OnInitialized()
	{
		BillRepository rep = new BillRepository();
		billsByDate = rep.GetBillsByDateRange(DateTime.Today.AddDays(-7), DateTime.Today);
		_config = GetChartConfig();
	}

	private IChartConfig GetChartConfig()
	{
		if (selectedBill != null)
		{
			return PieChart.GetPieChartConfig(selectedBill);
		}
		
		return BarChart.GetBarChartConfig(billsByDate, onClickAsyncBarChart);
	}

	private void NavigateToBillPage(string JsonBill = "")
	{
		@inject NavigationManager navManager;
		navManager.NavigateTo("bill/" + JsonBill);
	}

	public ValueTask onClickAsyncBarChart(CallbackGenericContext value)
	{
		selectedBill = billsByDate[value.DataIndex];
		_config = GetChartConfig();
		StateHasChanged();

		return ValueTask.CompletedTask;
	}

	private void GoBackToBarChart()
	{
		selectedBill = null;
		_config = GetChartConfig();
		StateHasChanged();
	}
}