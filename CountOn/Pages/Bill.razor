@page "/bill/"
@page "/bill/{billString}"

@using System.Text.Json;
@using Service.Repository;

<div class="bill-container">
	<div class="properties-container">

		@{
			void RenderInputField(string propertyName)
			{
				if (propertyName == "type")
				{
					<select @bind=@properties[propertyName] name="billType" id="billType">
						@foreach (var billType in Enum.GetNames(typeof(DBManager.Entities.BillType)))
						{
							<option value=@billType>@billType</option>
						}
					</select>

				}
				else
				{
					<input @bind=@properties[propertyName] type="text" name=@propertyName />
				}
			}

			void RenderProperty(string propertyName)
			{
				Boolean billIsNull = billObject == null;

				if (propertyName == "date" && billIsNull)
				{
					return;
				}

				<div class="white d-inline-flex p-1 m-2">
					<div class="property-label">@propertyName.First().ToString().ToUpper()@propertyName.Substring(1)</div>

					@if (propertyName == "date")
					{
						<div>@properties[propertyName]</div>
					}
					else if (billIsNull || editModeOn)
					{
						RenderInputField(propertyName);
					}
					else
					{
						<div>@properties[propertyName]</div>
					}
				</div>
			}

			RenderProperty("title");
			RenderProperty("price");
			RenderProperty("type");
			RenderProperty("date");
		}
	</div>
	<div class="buttons-container p-2 w-100">
		
		@if (billObject == null)
		{
			<div class="buttons-container w-50">
				<div class="red button p-1" @onclick="(e => NavigateToBillPage())">Back</div>
			</div>

			<div class="buttons-container w-50">
				<div class="green button p-1" @onclick="(e => SaveBill())">Save</div>
			</div>
		}
		else
		{
			<div class="buttons-container p-2 w-100">
				@if (editModeOn)
				{
					<div class="buttons-container w-50">
						<div class="red button p-1" @onclick="(e => SwitchEditMode())">Back</div>
					</div>

					<div class="green button p-1" @onclick="(e => UpdateBill())">Save</div>
				}
				else
				{
					<div class="buttons-container w-50">
						<div class="red button p-1" @onclick="(e => NavigateToBillPage())">Back</div>
					</div>

					<div class="green button p-1" @onclick="(e => SwitchEditMode())">Edit</div>
				}
			</div>
			<div class="buttons-container w-50">
				<div class="red button p-1" @onclick="(e => RemoveBill())">Remove</div>
			</div>
		}
	</div>
</div>

@functions {

	[Parameter]
	public String billString { get; set; }

	/* Current bill */
	private DBManager.Entities.Bill billObject { get; set; }
	/* Dictionary to store bill prperties */
	private Dictionary<string, string> properties = new Dictionary<string, string>();
	/* Flag to indicate if the user wants to edit the bill */
	private bool editModeOn = false;
}

@code {
	protected override void OnInitialized()
	{
		billObject = DBManager.Entities.Bill.Deserialize(billString);

		if (billObject != null)
		{
			properties.Add("title", billObject.Name);
			properties.Add("price", billObject.Price.ToString());
			properties.Add("type", billObject.BillType.ToString());
			properties.Add("date", billObject.BillDate.ToString());
		}
		else
		{
			properties.Add("title", "");
			properties.Add("price", "0");
			properties.Add("type", "");
			properties.Add("date", "");
		}
	}

	protected void SaveBill()
	{
		int price =  Int32.Parse(properties["price"]);
		Enum.TryParse(properties["type"], out DBManager.Entities.BillType type);

		DBManager.Entities.Bill b = new DBManager.Entities.Bill((string)properties["title"], price, type, DateTime.Now);
		Repository<DBManager.Entities.Bill> rep = new Repository<DBManager.Entities.Bill>();
		
		var queryResult = rep.AddEntity(b);

		if (queryResult.GetResult())
		{
			@inject NavigationManager navManager;
			navManager.NavigateTo("/");
		}
		/*
		 * TODO: Ad error message
		 */
	}
	
	private void NavigateToBillPage(string JsonBill = "")
	{
		@inject NavigationManager navManager;
		navManager.NavigateTo("/");
	}

	private void RemoveBill()
	{
		Repository<DBManager.Entities.Bill> rep = new Repository<DBManager.Entities.Bill>();
		var result = rep.RemoveEntity(billObject);

		if (result.GetResult())
		{
			NavigateToBillPage();
			Console.WriteLine("Removed bill ", billObject.Id);
		}
	}

	private void SwitchEditMode()
	{
		editModeOn = !editModeOn;
		StateHasChanged();
	}

	private void UpdateBill()
	{
		if (editModeOn)
		{
			Repository<DBManager.Entities.Bill> rep = new Repository<DBManager.Entities.Bill>();

			billObject.Name = properties["title"];
			billObject.Price = Int32.Parse(properties["price"]);
			Enum.TryParse(properties["type"], out DBManager.Entities.BillType billType);
			billObject.BillType = billType;

			var result = rep.UpdateEntity(billObject);

			Console.WriteLine("Updated result ", result.GetResult());
			SwitchEditMode();
		}
	}
}
