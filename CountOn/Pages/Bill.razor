@page "/bill/"
@page "/bill/{billString}"

@using System.Text.Json;
@using CountOn.Repository;

<div class="bill-container">
	<div class="properties-container">

		@{
			void RenderProperty(string propertyName)
			{
				Boolean billIsNull = billObject == null;
				if (propertyName == "date" && billIsNull)
				{
					return;
				}

				<div class="white d-inline-flex p-1 m-2">
					<div class="property-label">@propertyName.First().ToString().ToUpper()@propertyName.Substring(1)</div>

					@if (billIsNull)
					{
						if (propertyName == "type")
						{
							<select @bind=@properties[propertyName] name ="billType" id="billType">
								@foreach (var billType in Enum.GetNames(typeof(DBManager.Entities.BillType)))
								{
									<option value=@billType>@billType</option>
								}
							</select>
							
						}
						else
						{
							<input @bind=@properties[propertyName] type="text" name=@propertyName />
						}
					}
					else
					{
						<div>@properties[propertyName]</div>
					}
				</div>
			}

			RenderProperty("title");
			RenderProperty("price");
			RenderProperty("type");
			RenderProperty("date");
		}
	</div>
	@if (billObject == null)
	{
		<div class="buttons-container p-2 w-100">
			<div class="buttons-container w-50">
				<div class="red button p-1">Cancel</div>
			</div>
			<div class="buttons-container w-50">
				<div class="green button p-1" @onclick="(e => SaveBill())">Save</div>
			</div>
		</div>
	}
	else
	{
		<div class="buttons-container p-2 w-100">
			<div class="green button p-1">Edit</div>
		</div>
	}
</div>

@functions {

	[Parameter]
	public String billString { get; set; }

	private DBManager.Entities.Bill billObject { get; set; }
	private Dictionary<string, string> properties = new Dictionary<string, string>();
}

@code {
	protected override void OnInitialized()
	{
		billObject = DBManager.Entities.Bill.Deserialize(billString);

		if (billObject != null)
		{
			properties.Add("title", billObject.Name);
			properties.Add("price", billObject.Price.ToString());
			properties.Add("type", billObject.BillType.ToString());
			properties.Add("date", billObject.BillDate.ToString());
		}
		else
		{
			properties.Add("title", "");
			properties.Add("price", "0");
			properties.Add("type", "");
			properties.Add("date", "");
		}
	}

	protected void SaveBill()
	{
		int price =  Int32.Parse(properties["price"]);
		Enum.TryParse(properties["type"], out DBManager.Entities.BillType type);

		DBManager.Entities.Bill b = new DBManager.Entities.Bill((string)properties["title"], price, type, DateTime.Now);
		Repository<DBManager.Entities.Bill> rep = new Repository.Repository<DBManager.Entities.Bill>();
		
		var queryResult = rep.AddEntity(b);

		if (queryResult.GetResult())
		{
			@inject NavigationManager navManager;
			navManager.NavigateTo("/");
		}
		/*
		 * TODO: Ad error message
		 */
	}
}

@code{/*	<table class="table">
		<thead>
			<tr>
				<th>Date</th>
				<th>Temp. (C)</th>
				<th>Temp. (F)</th>
				<th>Summary</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var forecast in forecasts)
			{
				<tr>
					<td>@forecast.Date.ToShortDateString()</td>
					<td>@forecast.TemperatureC</td>
					<td>@forecast.TemperatureF</td>
					<td>@forecast.Summary</td>
				</tr>
			}
		</tbody>
	</table>
	*/}